{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hypercubing","text":"<p>Hypercubing is a niche branch of Rubik's Cubing that focuses on solving higher dimensional twisty puzzles. The ways that twisty puzzles move are mathematically well defined, and can be generalized to higher spatial dimensions. These puzzles can then be visualized and simulated using computer software.</p>  <p>The most well known 4D shape is the hypercube (also called the tesseract, 8-cell, octachoron, or 4-cube). It has 8 cubical sides that are called cells. Turning any of the cells involves rotating it like a cube to any of 24 orientations.</p>"},{"location":"#first-steps","title":"First Steps","text":"<p>Completely new to hypercubing? Check out our tutorial page and frequently asked questions :</p> <p>Tutorial FAQ</p> <p>Watch these helpful YouTube video playlists:</p> <ul> <li>Introduction to Hypercubing</li> <li>Melinda's 2x2x2x2 UWRs in order</li> <li>3x3x3x3 UWRs</li> <li>4D Twisty Puzzles</li> <li>Melinda's 2x2x2x2</li> <li>hypercubing videos</li> </ul> <p>Browse through our wiki pages: (work in progress)</p> <p>Software Physical Puzzles Methods</p> <p>Join our Discord server:</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-is-hypercubing","title":"What is hypercubing?","text":"What does hypercubing mean? <p>Just as cubing is the hobby of solving 3D twisty puzzles, Hypercubing is solving 4D+ twisty puzzles.</p>   What is the 4th dimension? <p>Hypercubing deals with higher dimensions of space. Essentially all this means is just another direction (humans can only percieve 3 orthogonal directions, which is what makes this so challenging).</p>  Isn't the 4th dimension time? <p>While time is a dimension, it behaves completely differently from the spatial dimensions. You can't move backward through it, measure shapes in it, etc. Another factor that can lead to confusion is the term spacetime or 4D spacetime. This is why physicists sometimes use the term 3+1 dimensions to describe our world, meaning that hypercubing would take place in 4+1 dimensions (or n+1 where n&gt;3).</p>  <p>See https://www.qfbox.info/4d/4dfaq for answers to other similar questions.</p>   What is a 4-dimensional Rubik's cube? How does that make any sense? <p>Read the MC4D FAQ</p>   Where can I interact with other hypercubers? <p>Join the Hypercubers Discord Server and Hypercubing Google Group. The Discord server is generally more active. Also join the r/Hypercubers reddit.</p>"},{"location":"faq/#virtual-puzzles","title":"Virtual puzzles","text":"What program should I download? <p>It depends on what exactly you want to do, but generally Hyperspeedcube, and MC4D will suit your needs. See the software page for links to all the major programs.</p>   How do I start learning to solve 4D puzzles? <p>First, download Hyperspeedcube or MC4D and start experimenting with the 34! Try to solve one-move scrambles and keep practicing that until you're comfortable. Once you can solve one-move scrambles with ease, pick a method to learn.</p>   Why not start with the 24? <p>The 24 is particularly confusing for beginners because half the puzzle turns at once so it's very easy to lose your bearings. While the 24 strategy is technically simpler, it's much much more challenging to wrap your head around, especially when you're new to 4D puzzles. Just like the 33 is a better starting puzzle in 3D, you learn lots of important concepts from the 34 that will help you with other puzzles.</p>   What methods exist for the 34? <p>Many 3D methods can just be scaled up and used on the 4D cube. Some notable methods are:</p> <ul> <li>Layer-by-layer</li> <li>CFOP \u2014 4D CFOP</li> <li>3Block \u2014 4D FreeFOP, ~20% fewer moves compared to CFOP</li> <li>Octachoroux \u2014 4D Roux, but awkward to use and many parity issues</li> </ul> <p>Alterantively, join others in voice chat on the Hypercubers Discord Server and someone will teach you!</p>"},{"location":"faq/#physical-puzzles","title":"Physical puzzles","text":"What is a physical 4D puzzle? <p>The physical 4D puzzles are puzzles that are perfectly analogous to the virtual 4D puzzles, but implemented in the physical world. See our puzzles page, the Physical Puzzle page on the Superliminal wiki, and Rowan Fortier's video about the history of physical hypercubes.</p>   How do I get Melinda's Physical 24? <p>All the information can be found on the Superliminal website, including the history, statistics, and Hall of Fame.</p>   Can I purchase any of Grant's hypercuboids? <p>No. Currently, they are one-of-a-kind. You would have to design and 3D print them yourself.</p>   What physical 4D puzzles exist? <p>2x2x2x2, 2x2x2x3, 2x2x3x3, 2x3x3x3, and 3x3x3x3</p>   Which 4D shapes can be turned into physical puzzles? <p>While it's always possible to just arrange the stickers on a table, the real challenge is in finding a design that is piece-based instead of sticker-based and fits in a compact shape that isn't too horrendous to turn. It just requires out-of-the-box thinking. We currently have several renderings for physical puzzles that haven't been built in real life yet.</p>   Can a physical 5D puzzle exist? <p>In 3d space, it's difficult to find a symmetrical design to arrange 5 colors. It's possible using icosahedral symmetry, but it would be painful to use. Perhaps some clever design will be invented in the future that allows us to fully implement 5D+ puzzles.</p>"},{"location":"faq/#speedsolving","title":"Speedsolving","text":"What are the speedsolving records for 4D puzzles? <p>See the leaderboards. To get on the leaderboard, submit a video of your solve to this form.</p>   Why not use speedrun.com? <p>Speedrun.com does not allow \"generic Rubik's Cube simulators.\" We applied and were rejected.</p>   I don't know full OLL/PLL/ZBLL/etc. Can I still get fast at 4D? <p>Absolutely! Most 4D speed methods are highly intuitive, and world-record times often use just 2-look OLL and PLL. Executing algorithms is a very negligible part of the solve compared to the massive amounts of pair or block building.</p>   Does full OLL/PLL/etc. exist for 4D puzzles? What about 4D algorithm explorers? <p>There's so many cases for each step of the solve that creating a complete algorithm set is basically impossible, and there's so many options for moves that algorithm explorers are infeasible. Almost every algorithm we have is based on an algorithm from 3D, and the only search program we have is a sort of optimizer for one very specific kind of algorithm derived from 3D.</p>"},{"location":"faq/#does-this-puzzle-exist","title":"Does this puzzle exist?","text":"4D Square-1 <p>Square-1 is fundamentally a bandaged dodecagonal prism. There are so many ways to extend that into 4D that there isn't really a canonical \"4D square-1\"</p>   4D Skewb <p>Again, there's lots of ways to generalize a skewb. If you just want cuts that look like a skewb, there's a few different puzzles that emulate that. If you want a half-cut vertex-turning hypercube, that's a thing too! It just doesn't \"look like\" a traditional skewb.</p>   8-dimensional and higher <p>There's just no point. After 5D, it's not difficult or interesting, just more tedious and computationally expensive.</p>   3D Rubik's Clock <p>Instead of rotating circles in 2D, you can rotate spheres in 3D. This is a more interesting puzzle than the traditional Rubik's Clock because moves don't commute. No one's written a program yet to simulate it but you totally could!</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#what-is-a-dimension","title":"What is a dimension?","text":"<p>The dimensionality of an object or space is the number of coordinates needed to describe its position. First, think of a 1-dimensional number line. To describe a position on the number line, all you need is one set of numbers for the coordinate. In 2-dimensional space like a graph, you need 2 sets of numbers to represent a point, such as \\((3,4)\\). This continues on to higher dimensions, where you need more and more numbers in order to locate a point.</p>  <p>Common Misconception</p> <ul> <li>The 4th dimension is NOT time. In a hypercubing context, higher dimensions refer to spatial dimensions, not temporal dimensions. Time is a different type of dimension because we can't move around in it in the same way we can for a spatial dimension.</li> </ul>  <p>The reason why it's so difficult to comprehend higher dimensions is that we can't see them in the same way we can see the normal 3 dimensions. In fact, humans technically only see in 2D, it's just that having 2 eyes allows for parallax and depth perception. When we show 3D shapes on a 2D computer monitor, they are getting projected into 2 dimensions. There are many types of spatial projections, and different ways to view higher dimensions, which only further obfuscates the understanding.</p> <p> By NerdBoy1392 - Own work, CC BY-SA 3.0, link</p> <p>Further reading:</p> <ul> <li>Four-dimensional space</li> </ul> <p>Next \u2192</p>"},{"location":"tutorial2/","title":"Tutorial","text":""},{"location":"tutorial2/#how-do-we-make-4d-puzzles","title":"How do we make 4D puzzles?","text":"<p>Puzzles are (usually) based on physical geometric shapes, so you have to understand what 4D shapes there are. 4D shapes have sides, or cells, that take the form of 3D shapes, and enclose some amount of \"hypervolume\".</p> <p>Check out these resources for a deeper understanding:</p> <ul> <li>Perfect Shapes in Higher Dimensions - Numberphile</li> <li>Regular polytope</li> <li>Regular 4-polytope</li> </ul> <p>One of the most important 4D shapes to understand is the hypercube, as it's considered to be the main attraction of hypercubing.</p>  <p>A hypercube (also known as a tesseract, 8-cell, octachoron, or 4-cube) is a shape with 8 cubic sides. 3 sides meet at each edge, giving it the Schl\u00e4fli symbol {\\(4,3,3\\)}. Watch the animation below, as the tesseract unfolds itself into its 3-dimensional net.</p>"},{"location":"tutorial2/#making-puzzles-out-of-shapes","title":"Making puzzles out of shapes","text":"<p>To make twisty puzzles out of higher dimensional shapes, we define cutting planes and twist axes, which will tell us which pieces go where when the puzzle is turned. Cutting a hypercube into 3 layers along each axis, we get the 3x3x3x3, or 34.</p>  <p>Congratulations, you have completed the tutorial!</p> <p> OK</p>"},{"location":"wiki/","title":"Wiki","text":"<p>Learn everything hypercubing, including history, software, puzzles, methods, tutorials, tecniques, algorithms, articles, and more!</p>"},{"location":"wiki/#goals","title":"Goals","text":"<p>Hypercubing is a very niche sub-branch within the already niche hobby of cubing. This makes finding information on it very difficult. The goal of this wiki is to compile all of our collective hypercubing knowledge into one location, so that anyone can find what they're looking for with ease.</p>"},{"location":"wiki/#where-to-start","title":"Where to Start","text":"<p>Remember that this wiki is still under construction, and it will take a long time before it is \"completed\". To get started, check out the following pages:</p> <p>Software Physical Puzzles Methods </p>"},{"location":"leaderboards/","title":"Leaderboards","text":"<p>General guidelines:</p> <ul> <li>Only submissions with videos as evidence will be accepted</li> <li>If using keyboard controls, please have the keybinds reference open</li> <li>Submit using this form or with a pull request adding a line to this file</li> </ul> <p>Happy hypercubing!</p> Virtual n4Physical 4DOther 4DMagicTile   2x2x2x23x3x3x34x4x4x45x5x5x56x6x6x67x7x7x7      Rank Name Time Date Program      1 Grant S. 36s 230ms 2023-03-08 HSC   2 Adam Marcellus Kelly 39s 400ms 2023-01-16 HSC   3 Tetrian 1m 00s 800ms 2021-07-24 MC4D      SingleAo5      Rank Name Time Date Program      1 Hactar 2m 07s 300ms 2023-04-08 HSC   2 Grant S. 2m 11s 330ms 2023-03-16 HSC   3 Adam Marcellus Kelly 3m 49s 300ms 2023-01-12 HSC   4 Rowan Fortier 4m 12s 920ms 2023-02-21 HSC   5 Luna Harran 5m 48s 730ms 2023-01-06 HSC   6 Tetrian 10m 11s 870ms 2019-05-04 MC4D   7 Alvin 12m 13s 260ms 2022-11-24 HSC   8 Koen R. 22m 25s 490ms 2023-01-09 HSC   9 Weill 24m 46s 950ms 2022-12-02 HSC         Rank Name Time Date Program      1 Grant S. 2m 28s 050ms 2023-04-10 HSC   2 Hactar 2m 33s 100ms 2023-04-08 HSC            Rank Name Time Date Program      1 Grant S. 9m 50s 700ms 2023-02-23 HSC   2 Hactar 11m 22s 350ms 2023-01-13 HSC   3 Luna Harran 29m 54s 820ms 2022-12-04 HSC   4 Tetrian 1h 12m 07s 650ms 2019-05-19 MC4D         Rank Name Time Date Program      1 Grant S. 28m 14s 310ms 2023-03-17 HSC   2 Hactar 40m 04s 760ms 2023-01-18 HSC   3 Luna Harran 1h 31m 38s 500ms 2022-12-07 HSC         Rank Name Time Date Program      1 Grant S. 1h 23m 25s 520ms 2023-03-03 HSC   2 Luna Harran 3h 15m 46s 110ms 2022-12-31 HSC         Rank Name Time Date Program      1 Grant S. 3h 27m 17s 510ms 2023-01-22 HSC   2 Hactar 4h 39m 59s 940ms 2023-01-21 HSC         Virtual Physical 3x3x3x3Physical 2x2x2x2Physical 2x2x2x2 One-Handed      Rank Name Time Date Program      1 Grant S. 10m 58s 780ms 2023-04-18 AKKEI-SIM   2 Hyperespy 44m 41s 490ms 2023-04-12 AKKEI-SIM         Rank Name Time Date      1 Grant S. 54s 840ms 2022-11-08   2 Rowan Fortier 1m 18s 240ms 2022-09-17   3 The Cube Dude 1m 42s 400ms 2023-03-30   4 Hyperespy 2m 11s 470ms 2022-11-15         Rank Name Time Date      1 Grant S. 3m 55s 620ms 2022-10-01   2 Rowan Fortier 5m 35s 290ms 2023-03-12         3-Layer Simplex      Rank Name Time Date Program      1 Grant S. 1m 17s 700ms 2023-03-15 MC4D   2 Rowan Fortier 1m 30s 460ms 2023-01-26 MC4D   3 Tetrian 1m 43s 440ms 2021-07-24 MC4D         Hemimegaminx      Rank Name Time Date Program      1 Grant S. 1m 51s 940ms 2023-03-19 HSC   2 Luna Harran 2m 06s 520ms 2023-03-18 HSC"},{"location":"leaderboards/solvers/","title":"Solvers","text":"<ul> <li>Adam Marcellus Kelly</li> <li>Alvin</li> <li>Grant S.</li> <li>Hactar</li> <li>Hyperespy</li> <li>Koen R.</li> <li>Luna Harran</li> <li>Rowan Fortier</li> <li>Tetrian</li> <li>The Cube Dude</li> <li>Weill</li> </ul>"},{"location":"leaderboards/templates/leaderboards/","title":"Leaderboards","text":"<p>General guidelines:</p> <ul> <li>Only submissions with videos as evidence will be accepted</li> <li>If using keyboard controls, please have the keybinds reference open</li> <li>Submit using this form or with a pull request adding a line to this file</li> </ul> <p>Happy hypercubing!</p>"},{"location":"leaderboards/templates/solvers/","title":"Solvers","text":""},{"location":"leaderboards/user/adam/","title":"Adam Marcellus Kelly","text":""},{"location":"leaderboards/user/adam/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     2x2x2x2 2 39s 400ms 2023-01-16 HSC   3x3x3x3 3 3m 49s 300ms 2023-01-12 HSC"},{"location":"leaderboards/user/adam/#history","title":"History","text":"Virtual n4   2x2x2x23x3x3x3      Rank Time Date Program     2 39s 400ms 2023-01-16 HSC    43s 540ms 2023-01-16 HSC      Single      Rank Time Date Program     3 3m 49s 300ms 2023-01-12 HSC    4m 34s 620ms 2023-01-10 HSC    5m 44s 860ms 2023-01-09 HSC    6m 58s 670ms 2023-01-09 HSC"},{"location":"leaderboards/user/alvin/","title":"Alvin","text":""},{"location":"leaderboards/user/alvin/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     3x3x3x3 7 12m 13s 260ms 2022-11-24 HSC"},{"location":"leaderboards/user/alvin/#history","title":"History","text":"Virtual n4   3x3x3x3   Single      Rank Time Date Program     7 12m 13s 260ms 2022-11-24 HSC"},{"location":"leaderboards/user/cubedude/","title":"The Cube Dude","text":""},{"location":"leaderboards/user/cubedude/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     Physical 2x2x2x2 3 1m 42s 400ms 2023-03-30 -"},{"location":"leaderboards/user/cubedude/#history","title":"History","text":"Physical 4D   Physical 2x2x2x2      Rank Time Date     3 1m 42s 400ms 2023-03-30"},{"location":"leaderboards/user/grant/","title":"Grant S.","text":""},{"location":"leaderboards/user/grant/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     2x2x2x2  1 36s 230ms 2023-03-08 HSC   3x3x3x3 2 2m 11s 330ms 2023-03-16 HSC   3x3x3x3 Ao5  1 2m 28s 050ms 2023-04-10 HSC   4x4x4x4  1 9m 50s 700ms 2023-02-23 HSC   5x5x5x5  1 28m 14s 310ms 2023-03-17 HSC   6x6x6x6  1 1h 23m 25s 520ms 2023-03-03 HSC   7x7x7x7  1 3h 27m 17s 510ms 2023-01-22 HSC   Physical 2x2x2x2  1 54s 840ms 2022-11-08 -   Physical 2x2x2x2 One-Handed  1 3m 55s 620ms 2022-10-01 -   3-Layer Simplex  1 1m 17s 700ms 2023-03-15 MC4D   Hemimegaminx  1 1m 51s 940ms 2023-03-19 HSC   Virtual Physical 3x3x3x3  1 10m 58s 780ms 2023-04-18 AKKEI-SIM"},{"location":"leaderboards/user/grant/#history","title":"History","text":"Virtual n4Physical 4DOther 4DMagicTile   2x2x2x23x3x3x34x4x4x45x5x5x56x6x6x67x7x7x7      Rank Time Date Program      1 36s 230ms 2023-03-08 HSC    44s 750ms 2023-01-02 HSC    48s 520ms 2023-01-01 HSC    49s 980ms 2023-01-01 HSC    50s 950ms 2022-12-21 HSC      SingleAo5      Rank Time Date Program     2 2m 11s 330ms 2023-03-16 HSC    2m 21s 010ms 2023-03-08 HSC    2m 30s 680ms 2023-02-25 HSC    2m 37s 880ms 2023-02-25 HSC    2m 41s 260ms 2023-02-24 HSC    2m 59s 340ms 2022-12-23 HSC         Rank Time Date Program      1 2m 28s 050ms 2023-04-10 HSC    2m 35s 940ms 2023-03-10 HSC    3m 01s 410ms 2023-02-24 HSC    3m 52s 000ms 2022-12-16 HSC            Rank Time Date Program      1 9m 50s 700ms 2023-02-23 HSC    10m 03s 550ms 2023-02-18 HSC    10m 33s 210ms 2023-02-16 HSC    10m 44s 230ms 2023-01-30 HSC    11m 13s 680ms 2023-01-29 HSC    11m 16s 710ms 2023-01-17 HSC    11m 44s 560ms 2023-01-14 HSC    11m 54s 530ms 2023-01-14 HSC    12m 33s 750ms 2023-01-12 HSC    13m 17s 780ms 2023-01-08 HSC    13m 21s 360ms 2023-01-06 HSC    14m 00s 760ms 2023-01-05 HSC    14m 10s 440ms 2023-01-05 HSC    14m 39s 130ms 2023-01-05 HSC    14m 39s 130ms 2023-01-04 HSC    15m 18s 840ms 2023-01-04 HSC    15m 44s 920ms 2023-01-03 HSC    15m 59s 750ms 2023-01-03 HSC    17m 21s 339ms 2022-12-31 HSC         Rank Time Date Program      1 28m 14s 310ms 2023-03-17 HSC    28m 58s 950ms 2023-02-21 HSC    29m 58s 510ms 2023-02-01 HSC    31m 06s 980ms 2023-01-23 HSC    33m 47s 210ms 2023-01-20 HSC    34m 33s 540ms 2023-01-17 HSC    39m 03s 510ms 2023-01-12 HSC    41m 59s 320ms 2023-01-05 HSC    49m 52s 500ms 2023-01-04 HSC    57m 43s 650ms 2022-12-30 HSC         Rank Time Date Program      1 1h 23m 25s 520ms 2023-03-03 HSC    1h 29m 29s 900ms 2023-02-02 HSC    1h 38m 45s 280ms 2023-01-18 HSC    2h 16m 26s 540ms 2023-01-12 HSC         Rank Time Date Program      1 3h 27m 17s 510ms 2023-01-22 HSC         Virtual Physical 3x3x3x3Physical 2x2x2x2Physical 2x2x2x2 One-Handed      Rank Time Date Program      1 10m 58s 780ms 2023-04-18 AKKEI-SIM    11m 30s 660ms 2023-04-12 AKKEI-SIM    12m 05s 250ms 2023-04-09 AKKEI-SIM    14m 33s 060ms 2023-04-04 AKKEI-SIM    17m 11s 750ms 2023-03-29 AKKEI-SIM         Rank Time Date      1 54s 840ms 2022-11-08         Rank Time Date      1 3m 55s 620ms 2022-10-01         3-Layer Simplex      Rank Time Date Program      1 1m 17s 700ms 2023-03-15 MC4D    1m 31s 110ms 2023-03-15 MC4D    1m 34s 160ms 2023-03-15 MC4D    1m 43s 190ms 2023-03-15 MC4D    1m 48s 760ms 2023-03-14 MC4D    2m 16s 370ms 2023-03-14 MC4D    2m 36s 420ms 2023-03-10 MC4D    3m 29s 740ms 2023-03-09 MC4D    6m 11s 010ms 2023-01-24 MC4D    8m 15s 420ms 2023-01-19 MC4D         Hemimegaminx      Rank Time Date Program      1 1m 51s 940ms 2023-03-19 HSC    2m 19s 990ms 2023-03-18 HSC    3m 35s 860ms 2023-03-18 HSC"},{"location":"leaderboards/user/hactar/","title":"Hactar","text":""},{"location":"leaderboards/user/hactar/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     3x3x3x3  1 2m 07s 300ms 2023-04-08 HSC   3x3x3x3 Ao5 2 2m 33s 100ms 2023-04-08 HSC   4x4x4x4 2 11m 22s 350ms 2023-01-13 HSC   5x5x5x5 2 40m 04s 760ms 2023-01-18 HSC   7x7x7x7 2 4h 39m 59s 940ms 2023-01-21 HSC"},{"location":"leaderboards/user/hactar/#history","title":"History","text":"Virtual n4   3x3x3x34x4x4x45x5x5x57x7x7x7   SingleAo5      Rank Time Date Program      1 2m 07s 300ms 2023-04-08 HSC    2m 17s 970ms 2023-03-11 HSC    2m 26s 460ms 2023-02-18 HSC    2m 29s 730ms 2023-01-11 HSC    2m 39s 470ms 2023-01-08 HSC    2m 41s 220ms 2023-01-03 HSC    2m 42s 810ms 2022-12-30 HSC         Rank Time Date Program     2 2m 33s 100ms 2023-04-08 HSC    2m 35s 290ms 2023-04-08 HSC    2m 39s 640ms 2023-02-18 HSC    3m 02s 780ms 2022-12-31 HSC            Rank Time Date Program     2 11m 22s 350ms 2023-01-13 HSC    11m 39s 600ms 2023-01-13 HSC    11m 42s 850ms 2023-01-13 HSC    12m 25s 220ms 2023-01-13 HSC    12m 28s 140ms 2023-01-13 HSC    13m 13s 650ms 2023-01-12 HSC    13m 34s 550ms 2023-01-12 HSC    13m 58s 650ms 2023-01-08 HSC    14m 38s 910ms 2023-01-05 HSC    15m 28s 210ms 2023-01-04 HSC    16m 47s 070ms 2023-01-04 HSC    17m 14s 760ms 2023-01-03 HSC    23m 26s 720ms 2023-01-01 HSC         Rank Time Date Program     2 40m 04s 760ms 2023-01-18 HSC    43m 15s 780ms 2023-01-13 HSC    44m 25s 040ms 2023-01-12 HSC    55m 13s 040ms 2023-01-04 HSC    1h 04m 03s 180ms 2023-01-03 HSC         Rank Time Date Program     2 4h 39m 59s 940ms 2023-01-21 HSC"},{"location":"leaderboards/user/hyperespy/","title":"Hyperespy","text":""},{"location":"leaderboards/user/hyperespy/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     Physical 2x2x2x2 4 2m 11s 470ms 2022-11-15 -   Virtual Physical 3x3x3x3 2 44m 41s 490ms 2023-04-12 AKKEI-SIM"},{"location":"leaderboards/user/hyperespy/#history","title":"History","text":"Physical 4D   Virtual Physical 3x3x3x3Physical 2x2x2x2      Rank Time Date Program     2 44m 41s 490ms 2023-04-12 AKKEI-SIM    47m 43s 810ms 2023-04-04 AKKEI-SIM         Rank Time Date     4 2m 11s 470ms 2022-11-15"},{"location":"leaderboards/user/koen/","title":"Koen R.","text":""},{"location":"leaderboards/user/koen/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     3x3x3x3 8 22m 25s 490ms 2023-01-09 HSC"},{"location":"leaderboards/user/koen/#history","title":"History","text":"Virtual n4   3x3x3x3   Single      Rank Time Date Program     8 22m 25s 490ms 2023-01-09 HSC"},{"location":"leaderboards/user/luna/","title":"Luna Harran","text":""},{"location":"leaderboards/user/luna/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     3x3x3x3 5 5m 48s 730ms 2023-01-06 HSC   4x4x4x4 3 29m 54s 820ms 2022-12-04 HSC   5x5x5x5 3 1h 31m 38s 500ms 2022-12-07 HSC   6x6x6x6 2 3h 15m 46s 110ms 2022-12-31 HSC   Hemimegaminx 2 2m 06s 520ms 2023-03-18 HSC"},{"location":"leaderboards/user/luna/#history","title":"History","text":"Virtual n4MagicTile   3x3x3x34x4x4x45x5x5x56x6x6x6   Single      Rank Time Date Program     5 5m 48s 730ms 2023-01-06 HSC            Rank Time Date Program     3 29m 54s 820ms 2022-12-04 HSC         Rank Time Date Program     3 1h 31m 38s 500ms 2022-12-07 HSC         Rank Time Date Program     2 3h 15m 46s 110ms 2022-12-31 HSC         Hemimegaminx      Rank Time Date Program     2 2m 06s 520ms 2023-03-18 HSC    2m 11s 570ms 2023-03-18 HSC    2m 54s 050ms 2023-03-18 HSC    4m 30s 570ms 2023-03-18 HSC"},{"location":"leaderboards/user/rowan/","title":"Rowan Fortier","text":""},{"location":"leaderboards/user/rowan/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     3x3x3x3 4 4m 12s 920ms 2023-02-21 HSC   Physical 2x2x2x2 2 1m 18s 240ms 2022-09-17 -   Physical 2x2x2x2 One-Handed 2 5m 35s 290ms 2023-03-12 -   3-Layer Simplex 2 1m 30s 460ms 2023-01-26 MC4D"},{"location":"leaderboards/user/rowan/#history","title":"History","text":"Virtual n4Physical 4DOther 4D   3x3x3x3   Single      Rank Time Date Program     4 4m 12s 920ms 2023-02-21 HSC    4m 20s 019ms 2023-01-12 HSC    4m 27s 700ms 2023-01-12 HSC    4m 38s 750ms 2023-01-12 HSC    4m 42s 190ms 2023-01-11 HSC    4m 50s 970ms 2023-01-09 HSC    4m 55s 270ms 2023-01-09 HSC    5m 02s 290ms 2023-01-06 HSC    5m 21s 880ms 2023-01-06 HSC    5m 27s 170ms 2023-01-05 HSC    5m 45s 180ms 2023-01-05 HSC    5m 48s 120ms 2023-01-05 HSC    5m 51s 330ms 2023-01-05 HSC    5m 58s 300ms 2023-01-04 HSC    6m 25s 040ms 2023-01-04 HSC    6m 31s 020ms 2022-12-01 HSC            Physical 2x2x2x2Physical 2x2x2x2 One-Handed      Rank Time Date     2 1m 18s 240ms 2022-09-17         Rank Time Date     2 5m 35s 290ms 2023-03-12    6m 14s 880ms 2023-03-12    6m 25s 120ms 2022-07-01         3-Layer Simplex      Rank Time Date Program     2 1m 30s 460ms 2023-01-26 MC4D    1m 43s 450ms 2023-01-25 MC4D    2m 14s 040ms 2023-01-23 MC4D"},{"location":"leaderboards/user/tetrian/","title":"Tetrian","text":""},{"location":"leaderboards/user/tetrian/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     2x2x2x2 3 1m 00s 800ms 2021-07-24 MC4D   3x3x3x3 6 10m 11s 870ms 2019-05-04 MC4D   4x4x4x4 4 1h 12m 07s 650ms 2019-05-19 MC4D   3-Layer Simplex 3 1m 43s 440ms 2021-07-24 MC4D"},{"location":"leaderboards/user/tetrian/#history","title":"History","text":"Virtual n4Other 4D   2x2x2x23x3x3x34x4x4x4      Rank Time Date Program     3 1m 00s 800ms 2021-07-24 MC4D      Single      Rank Time Date Program     6 10m 11s 870ms 2019-05-04 MC4D            Rank Time Date Program     4 1h 12m 07s 650ms 2019-05-19 MC4D         3-Layer Simplex      Rank Time Date Program     3 1m 43s 440ms 2021-07-24 MC4D"},{"location":"leaderboards/user/weill/","title":"Weill","text":""},{"location":"leaderboards/user/weill/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program     3x3x3x3 9 24m 46s 950ms 2022-12-02 HSC"},{"location":"leaderboards/user/weill/#history","title":"History","text":"Virtual n4   3x3x3x3   Single      Rank Time Date Program     9 24m 46s 950ms 2022-12-02 HSC"},{"location":"wiki/3block/","title":"3-Block","text":"<p>3-Block is a method designed for quickly speedsolving the 34. Many speesolving world records have been set using this method. It was primarily invented by Luna and HactarCE, and has been described as \"ZZ without EO\". 3-Block is most analogous to the 33 method FreeFOP (which omits a single cross piece in order to pair pieces easier).</p>  <p>Prerequisites</p> <ul> <li>Knowledge of how the 4D puzzle moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul>   HSC Piece filters Pink crossRowan's filters (white cross)   <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: Mid (back)\n  visible_pieces: 000200084a5090294284\n- preset_name: Mid\n  visible_pieces: 000200094a5294294294\n- preset_name: Left (cross)\n  visible_pieces: 000200094a5294296294\n- preset_name: Left\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: BL-a\n  visible_pieces: 0002000d4a7a943963d4\n- preset_name: BL\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: FL-a\n  visible_pieces: 0002000d6b7ad4bd63d6\n- preset_name: FL\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: Right (cross)\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: Right\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: BR-a\n  visible_pieces: 0002008d7bfbf6fdefd7\n- preset_name: BR\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: FR-a\n  visible_pieces: 0002008dfffbf7ffffdf\n- preset_name: FR\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: OLC\n  visible_pieces: ffffff70000000000000\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre>   <pre><code>- preset_name: 4/6Cross\n  visible_pieces: 000204080a5830004080\n- preset_name: Middle 1\n  visible_pieces: 00070e080a5830004080\n- preset_name: Middle 2\n  visible_pieces: 00070e080a583000e0c1\n- preset_name: Left Block 1\n  visible_pieces: 00478e080a5a3008e0d1\n- preset_name: Left Block 2\n  visible_pieces: 00478e080e5e3008e0d1\n- preset_name: Left Block 3\n  visible_pieces: 00c78f080e5e3008e0d1\n- preset_name: Left Block 4\n  visible_pieces: 00c78f080e5e3008f0f1\n- preset_name: Left Block 5\n  visible_pieces: 00c78f080f5f3008f0f1\n- preset_name: Left Block 6\n  visible_pieces: 00e7cf080f5f3008f0f1\n- preset_name: Left Block 7\n  visible_pieces: 00e7cf080f5f300cf8f1\n- preset_name: Right Block 1\n  visible_pieces: 00e7df280f5fb00cfaf5\n- preset_name: Right Block 2\n  visible_pieces: 00e7df280fdfb10cfaf5\n- preset_name: Right Block 3\n  visible_pieces: 00e7ff680fdfb10cfaf5\n- preset_name: Right Block 4\n  visible_pieces: 00e7ff680fdfb10cfefd\n- preset_name: Right Block 5\n  visible_pieces: 00e7ff680ffff10cfefd\n- preset_name: Right Block 6\n  visible_pieces: 00efff780ffff10cfefd\n- preset_name: Right Block 7\n  visible_pieces: 00efff780ffff10cffff\n- preset_name: 2c OLC\n  visible_pieces: 01efff7d5ffff12cffff\n- preset_name: 3c OLC\n  visible_pieces: abeffffffffff57dffff\n- preset_name: 4c OLC\n  visible_pieces: 54ffff700ffffb8effff\n- preset_name: 2c PLC\n  visible_pieces: 01efff7d5ffff12cffff\n- preset_name: RKT PLC Cross\n  visible_pieces: ab00000d500000204000\n- preset_name: RKT PLC F2L\n  visible_pieces: ff10008ff00000204000\n- preset_name: RKT PLC LL\n  visible_pieces: ff10008ff0000ef30000\n</code></pre>"},{"location":"wiki/3block/#summary","title":"Summary","text":"<ol> <li><code>4-Cross</code> \u2014 Solve 4 out of the 6 cross pieces.</li> <li><code>Mid</code> \u2014 Solve 4 2c3c pairs betwen the 4 cross pieces.</li> <li><code>Left</code> \u2014 Blockbuild or pair pieces to solve the Left Cell.</li> <li><code>Right</code> \u2014 Blockbuild or pair pieces to solve the Right Cell.</li> </ol>"},{"location":"wiki/3block/#steps","title":"Steps","text":""},{"location":"wiki/3block/#4-cross","title":"4-Cross","text":"<p>Solve the four 2c cross pieces in a ring in the M slice. Leave the L and R cross pieces unsolved.</p>"},{"location":"wiki/3block/#mid","title":"Mid","text":"<p>Tip</p> <p>For the entirety of F2L, the last layer is held on the I cell, as opposed to CFOP where it is held on the U cell. This allows us to see more information at once.</p>  <p>Create and insert 4 F2L-a (2c3c) pairs into the 4/6 cross. This will solve 2/3 of the M slice. Because the Left and Right cells don't have their cross pieces, you can use them to aid with building and inserting the pairs.</p>"},{"location":"wiki/3block/#left","title":"Left","text":"<p>Solve the Left cell. This is done in 3 blocks, hence the name of the method. The first block consists of the cross edge, followed by two 2c3c F2L-a pairs that are opposite of each other. This solves the middle column of the left cell. The final two blocks consist of a 2c3c pair, and two 3c4c pairs.</p>"},{"location":"wiki/3block/#right","title":"Right","text":"<p>Solve the Right cell. This is also done by breaking it up into the 3 blocks, except now you don't have an empty opposite cell to aid you in making pairs. You could just solve the cross edge, and then finish the whole solve using CFOP style F2L and Last Cell. You can also do it the 3 blocks way, except having less freedom means that it is slightly trickier to set up the correct cases.</p>"},{"location":"wiki/3block/#last-cell","title":"Last Cell","text":"<p>This is done in the exact same way as CFOP.</p>"},{"location":"wiki/3block/#big-cubes","title":"Big cubes","text":"<p>Solve all the centers, then pair up only the pieces you need during the step of 3-block you're on. For example: after solving centers, pair up 4 cross ridges. For last cell, you can either just orient everything, and then do an RKT 44 solve, or you can pair everything and end up with an RKT 33 solve.</p>"},{"location":"wiki/4tega/","title":"4tega","text":"<p>4tega is the 4-dimensional equivalent of the Ortega Method on 23. There are 2 main variants, as there is no perfect way to generalize this method to 4d.</p>"},{"location":"wiki/4tega/#variant-1","title":"Variant 1","text":""},{"location":"wiki/4tega/#orient-both-cells","title":"Orient Both Cells","text":"<p>Start by orienting a single side, using either colour from that side or its opposite side. This can easily be done without RKT by using blockbuilding. Next, use 24 OLC strategies to orient the other cell. Because the first cell isn't solved, you don't have to worry about messing it up, allowing you to save moves.</p>"},{"location":"wiki/4tega/#separate-colors","title":"Separate colors","text":"<p>Separate the colors of the cells that are oriented, leaving you with 2 23 solves.</p>"},{"location":"wiki/4tega/#permute-both-cells","title":"Permute Both Cells","text":"<p>Solve the first cell like a 23 without RKT, then solve the other cell like a 23, but using RKT.</p>"},{"location":"wiki/4tega/#variant-2","title":"Variant 2","text":""},{"location":"wiki/4tega/#orient-both-cells_1","title":"Orient Both Cells","text":"<p>Same as in Variant 1.</p>"},{"location":"wiki/4tega/#separate-colors_1","title":"Separate colors","text":"<p>Same as in Variant 1.</p>"},{"location":"wiki/4tega/#orient-both-layers-of-both-cells","title":"Orient Both Layers of Both Cells","text":"<p>Use RKT to orient both layers of both cells, just like OBL in 3D Ortega. This can be done using the OCLL algorithms.</p>"},{"location":"wiki/4tega/#p4lpblbc","title":"P4L/PBLBC","text":"<p>Permtue all 4 layers of both cells at once using algorithms. Some algorithms can be found here.</p>"},{"location":"wiki/big-cube-reduction/","title":"Big Cube Reduction","text":"<p>Not to be confused with Dimensional Reduction</p>"},{"location":"wiki/cell-by-cell/","title":"Cell by Cell","text":""},{"location":"wiki/cfop/","title":"CFOP","text":"<p>3D CFOP can be easily implemented on the 4D Rubik's Cube. This method was also called Sheerin-Zhao Method (Hybrid) V1, named after the people who discovered its higher dimensional equivalence.</p>  <p>Prerequisites</p> <ul> <li>Knowledge of how the 4D puzzle moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul>"},{"location":"wiki/cfop/#summary","title":"Summary","text":"<ol> <li>Cross \u2014 Build a cross by solving six 2c pieces on the O or D cell</li> <li>F2L-a \u2014 Join 2c+3c pairs together and insert them into the first two layers</li> <li>F2L-b \u2014 Join 3c+4c pairs together and insert them into the first two layers</li> <li>OLC \u2014 Orient LC 2c, 3c, and 4c pieces using 3D EOLL and OCLL</li> <li>PLC \u2014 Permute LC 2c pieces of the LL using EPLL, then solve 3c and 4c like a 3^3 using RKT</li> </ol>"},{"location":"wiki/cfop/#steps","title":"Steps","text":""},{"location":"wiki/cfop/#cross","title":"Cross","text":"<p>Using the same techniques from 3D, intuitively place the cross 2c pieces such that they lie between their centers, correctly oriented. After this step, the cross should be kept on the D layer.</p>"},{"location":"wiki/cfop/#f2l-a","title":"F2L-a","text":"<p>Find a pair of 2C and 3C pieces. Find a way to bring them onto the P slice using easy intuitve setups. Now, you should be able to pair them up using \"normal\" looking 3x3x3 moves.</p> <p>Repeat this until you have solved all 12 2c3c pairs of F2L-a.</p>  <p>Misoriented pairs</p> <p>It is possible to insert a pair into its slot, but rotated in place. Make sure to line it up so that it looks like a normal 3x3x3 case before inserting the pair. Oftentimes, this just means doing a Ux2 or Uz2 move beforehand.</p>"},{"location":"wiki/cfop/#f2l-b","title":"F2L-b","text":"<p>Find any 3C piece that doesn't have a U cell colour. Find its respective 4C piece.</p> <ul> <li>If they both have the same coloured sticker on the U cell, use RKT on the U cell to pair them up.</li> <li>If the 4C is stuck in a slot in the D cell, bring the edge over the slot such that its colour on the I cell matches the 4C's colour on the I cell. Then use RKT to pair them up.</li> <li>If the 3C is stuck in a slot in the middle layer, bring the 4C on top of it until its colour on the I cell matches the 3C's colour on the I cell. Then use RKT to pair them up.</li> <li>If none of the above cases occured, then you kind of just have to fiddle around with it or pick a different pair to solve.</li> </ul> <p>Repeat for all 8 3c4c pairs of F2L-b.</p>"},{"location":"wiki/cfop/#olc","title":"OLC","text":""},{"location":"wiki/cfop/#2c-olc","title":"2c OLC","text":"<p>Use EOLL algorithms from 2-look OLL to orient the 2C pieces. This can always be done in 2 EOLL algorithms (or less).</p>"},{"location":"wiki/cfop/#3c-olc","title":"3c OLC","text":"<p>Use RKT to set up the slice layers of the Last Cell into configurations that look like possible OCLL cases. Then use the OCLL algorithms to solve that case. This can always be done in 3 OCLL algorithms (or less)</p>  <p>3c monotwist</p> <p>It's possible to have just 1 3c piece twisted in place. To avoid this, make sure that your last OCLL algorithm will solve all of the 3c pieces. For example if you have 5 left, you can't set it up into an H OCLL case, because that will solve 4/5, leaving you with 1 left. Instead, you can set it up into a Sune case, which would then leave you with 2 (which you can solve using a T or U case OCLL algorithm).</p>"},{"location":"wiki/cfop/#4c-olc","title":"4c OLC","text":"<p>Use RKT on the Last Cell to set up the 4c pieces into possible OCLL cases. Rotate the Last Cell to U, such that your OCLL case is in the IU plane, then execute that algorithm with RKT.</p>  <p>4c monoflip</p> <p>It's possible to have just 1 4c piece flipped in place. To avoid this, make sure that your last OCLL algorithm will solve all of the 4c pieces. For example if you have 5 left, you can't set it up into an H OCLL case, because that will solve 4/5, leaving you with 1 left. Instead, you can set it up into a Sune case, which would then leave you with 2 (which you can solve using a T or U case OCLL algorithm).</p>"},{"location":"wiki/cfop/#plc","title":"PLC","text":""},{"location":"wiki/cfop/#2c-plc","title":"2c PLC","text":"<p>Match as many 2c pieces as possible (ideally, you get 2 solved that are opposite of each other). Then use EPLL algorithms to permute the rest of them. If you don't have 2 that are opposite of each other, you can do an initial U perm to solve 2 opposite.</p> <p>There are also fancy new 3-cycle algorithms for a 4D \"adjacent U-perms\" in both directions. (Cycles the 2cs around a corner)</p>"},{"location":"wiki/cfop/#rkt-plc","title":"RKT PLC","text":"<p>From here, you use RKT to solve the rest of the puzzle like a whole 3^3. The CFOP method is recommended for this because you arrive at this step inspectionless, meaning that in a speedsolve, you don't really have the time to count Edge Orientation, or plan a First Block. Finding 4 cross pieces is pretty easy inspectionless.</p>  <p>RKT parity</p> <p>If the \"top face\" of the LL is 180 degrees off from the rest of the puzzle, you have to use a special 4D algorithm to correct this. See RKT for algorithms.</p>   <p>RKT parity avoidance</p> <p>You can avoid RKT parity every single time by using 2-look PLL (if you solve RKTPLC using CFOP [2-look CMLL if you solve with Roux]). When you get to PLL, correct any RKT debt you have. Then put the solved LL corner in the UIFR spot. Now you can do whichever A-perm you have (clockwise or anticlockwise). Finally, you can use an EPLL alg without worrying about whether you'll get RKT parity or not.</p>"},{"location":"wiki/commutators/","title":"Commutators","text":"<p>A commutator (or comm) is a sequence of moves where you do a sequence A, then a sequence B, then the inverse of A, and finally the inverse of B. After completion, only specific pieces are affected, making it easier to solve the puzzle.</p> <p>One of the earliest solutions for the 3x3x3x3 was The Ultimate Solution to a 3x3x3x3 by Roice Nelson, which made heavy use of intuitive setup moves and commutators. Commutators were also much easier to use in MC4D due to the Macro feature, which could automatically execute any sequence of moves that you defined.</p>"},{"location":"wiki/commutators/#notation","title":"Notation","text":"<p>Commutators are notated <code>[A, B]</code>, which means to do A, B, A', B'.</p> <p>For example, the commutator <code>[M', U2]</code> cycles 3 edges in the M layer of a 3x3x3. Written out, it would be <code>M' U2 M U2</code>. </p> <p>Commutators can also be nested within commutators, such as <code>[D, [R, U]]</code>, which is a cycle of 3 corners, <code>D R U R' U' D' U R U' R'</code></p>"},{"location":"wiki/commutators/#strategy","title":"Strategy","text":"<p>Once you find commutators for cycling different types of pieces on a puzzle (2c, 3c, etc) then you can almost solve the whole thing! (There may be some situations where you need an algorithm to swap 2 pieces of a type and 2 of a different type.)</p>"},{"location":"wiki/dimensional-reduction/","title":"Dimensional Reduction","text":"<p>Not to be confused with Big Cube Reduction</p>  <p>Dimensional reduction is a technique to reduce an nd puzzle into an nd-1 puzzle. It does this by pairing up n-piece long bars (e.g. to reduce 34 into 33, pair up 3-piece long bars).</p> <p>To get to the dimensionally reduced state from a solved 34, do only turns that don't change the colours of the I/O axis (moves that look like big 33 moves).</p> <p>Below is Andrey's log file of a 3x3x3x3 solve done with dimensional reduction. It's essentially a CFOP solve, but with some advanced pseudo-slotting and commutators. It's sort of like doing Pseudo F2L (where the pairs can be in any slot), and then doing OLC/PLC, except solving the PLC into the scrambled reduced state of the rest of the puzzle.</p>  Andrey_34.log Andrey_34.log<pre><code>MagicCube4D 3 0 315 {4,3,3} 3\n-0.18955569589822457 0.43991704061351233 -0.877805009971115 -2.7145128148370095E-16\n-2.839993659326744E-9 1.4847274022149884E-10 6.876845398745129E-10 -1.0\n-0.14794206390078768 -0.8966035341133775 -0.41739100175276544 8.357431997622695E-19\n0.970660488472316 -0.05074544307867573 -0.2350385417871584 -2.925836319069701E-9\n*\n104,1,1 12,-1,2 82,1,4 72,1,4 101,-1,1 58,1,4 169,1,4 136,1,2 174,-1,1 158,-1,2\n100,-1,2 44,-1,2 156,1,4 201,-1,1 141,-1,4 40,1,4 208,1,2 162,1,2 143,1,2 171,1,1\n208,-1,1 144,1,4 182,-1,1 56,-1,2 186,1,4 126,1,1 200,-1,2 120,-1,2 156,1,1 194,1,2\n166,-1,2 85,1,1 6,-1,1 143,-1,1 120,1,2 182,-1,2 147,1,4 203,1,1 71,-1,2 192,-1,2\n73,1,2 5,-1,2 159,-1,1 124,-1,2 5,1,2 184,1,4 122,1,1 213,-1,1 m| 102,-1,1\n24,1,1 49,-1,1 20,1,1 131,-1,1 24,1,1 186,1,1 157,1,1 22,1,1 49,-1,1 211,-1,4\n209,1,1 75,-1,1 197,1,1 75,1,1 212,1,4 131,-1,1 194,1,1 131,1,1 195,-1,4 102,-1,1\n211,1,1 102,1,1 214,-1,4 184,1,1 214,-1,1 184,-1,1 214,1,4 78,-1,1 210,1,1 78,1,1\n210,-1,4 209,-1,1 76,1,1 205,1,1 76,-1,1 212,-1,4 78,-1,1 199,1,1 78,1,1 191,-1,4\n202,1,1 52,-1,1 204,1,4 132,1,1 210,1,1 210,1,1 132,-1,1 15,1,1 128,1,1 74,-1,1\n106,-1,1 214,1,4 131,1,1 195,-1,1 131,-1,1 214,-1,4 214,-1,1 187,-1,1 196,-1,4 158,-1,1\n213,1,1 158,1,1 196,1,4 155,1,1 211,1,4 78,1,1 210,-1,1 78,-1,1 22,1,1 214,1,1\n77,1,1 212,1,1 77,-1,1 206,1,1 185,-1,1 212,-1,1 185,1,1 77,1,1 212,-1,1 77,-1,1\n190,1,1 6,-1,1 48,1,1 209,-1,1 48,-1,1 190,1,4 182,1,1 160,-1,1 52,-1,1 24,1,1\n157,1,1 213,1,4 157,-1,1 198,1,1 157,1,1 213,-1,4 157,-1,1 213,1,4 74,1,1 187,-1,1\n189,-1,4 105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 189,1,4 187,1,1\n105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 3,1,1 210,1,1 130,-1,1\n212,-1,4 130,1,1 199,1,1 130,-1,1 212,1,4 130,1,1 192,1,4 74,1,1 193,-1,4 198,1,1\n76,-1,1 210,-1,4 76,1,1 201,1,1 76,-1,1 210,1,4 76,1,1 193,1,4 101,1,1 187,-1,1\n187,-1,1 200,1,4 48,-1,1 209,-1,4 48,1,1 191,1,1 48,-1,1 209,1,4 48,1,1 200,1,4\n51,-1,1 199,1,4 51,1,1 213,-1,1 51,-1,1 199,1,4 51,1,1 182,-1,1 78,1,1 202,1,4\n78,-1,1 210,1,1 210,1,1 78,1,1 202,1,4 78,-1,1 128,1,2 160,1,1 128,1,2 160,-1,1\n182,-1,2 182,-1,2 132,-1,1 202,1,4 132,1,1 196,1,1 132,-1,1 202,1,4 132,1,1 211,1,1\n211,1,1 47,-1,1 201,1,1 101,1,1 74,1,1 201,1,1 128,-1,1 155,-1,1 200,1,1 47,1,1\n155,1,1 200,1,1 52,-1,1 202,1,1 74,-1,1 128,-1,1 202,1,1 182,-1,1 160,1,1 208,1,1\n182,-1,1 155,-1,1 208,1,1 155,1,2 206,1,1 182,1,1 101,1,1 206,1,1 47,1,1 74,-1,1\n207,1,1 182,1,1 128,1,1 207,1,1 187,-1,1 197,1,1 47,1,1 74,1,1 47,-1,1 74,-1,1\n47,1,1 74,1,1 197,1,1 133,-1,1 155,-1,1 155,-1,1 133,-1,1 52,1,1 133,1,1 52,-1,1\n205,1,1 74,-1,1 182,-1,1 74,1,1 182,1,1 74,-1,1 182,-1,1 205,1,1 133,-1,1 203,1,1\n155,-1,1 101,-1,1 155,1,1 101,1,1 155,-1,1 101,-1,1 203,1,1 52,-1,1 79,1,1 52,1,1\n52,1,1 208,1,1 182,-1,1 155,-1,1 182,1,1 155,1,1 182,-1,1 155,-1,1 208,1,1 155,-1,1\n74,-1,1 74,-1,1 182,1,1 74,-1,1 182,-1,1 101,1,1 182,1,1 101,-1,1 182,1,1 101,-1,1\n101,-1,1 74,1,1 74,1,1 47,-1,1 128,1,1 155,-1,1 155,-1,1 47,-1,1 47,-1,1 79,-1,1\n79,-1,1 47,-1,2 47,-1,2 106,1,1 74,-1,1 74,-1,1 47,1,1 133,1,1 133,1,1 79,1,1\n79,1,1 101,1,2 101,1,2 187,-1,1 47,1,1 47,1,1 101,1,1 101,1,1 47,1,1 47,1,1\n101,1,1 101,1,1 47,1,1 47,1,1 74,-1,1 74,-1,1 47,-1,2 74,1,1 74,1,1 47,1,2\n74,1,1 74,1,1 133,1,1 133,1,1.\n</code></pre> <p>The move count is extremely low, which is pretty cool.</p>"},{"location":"wiki/flowchart/","title":"Flowchart","text":"<p>// This is a rough draft</p> <p>Just getting started with hypercubing? For the best experience, we recommend learning things in this order:</p> <pre><code>flowchart TD\n    A[3x3x3]\n    B[3x3x3x3]\n    C[3D cuboid knowledge]\n    D[Hypercuboids]\n    E[2x2x2x2]\n    F[Physical 2x2x2x2]\n    G[Other physical]\n    H[4x4x4x4+]\n    I[Intermediate 3D puzzle knowledge]\n    J[Simplex]\n    K[Duoprisms]\n    B &amp; C --&gt; D\n    A --&gt; B\n    A --&gt; C\n    A --&gt; I\n    B --&gt; E\n    B --&gt; H\n    B &amp; I --&gt; J\n    B &amp; I --&gt; K\n    E --&gt; F\n    F --&gt; G</code></pre>"},{"location":"wiki/grant-2223/","title":"Grant's 2x2x2x3","text":"<p> <p> Grant's rendering of a 2x2x2x3.  </p>"},{"location":"wiki/grant-2223/#history","title":"History","text":"<p>In December of 2021, Melinda green posted this image to the Hypercubers Discord server, jokingly calling it a 2x2x2x3:</p> <p> <p> Melinda's 2x2x2x3 </p> <p>After Melinda posted that, Luna started sketching out some ideas of possible layouts for an actual 2x2x2x3.</p> <p>She invented the design for the 3c pieces by dividing the edges of a cube into 12 sections like this, grouping 4 sets of 3 together symmetrically.</p> <p> <p> Luna's 3c design </p> <p>This is when Grant joined the server, and shared his 3D printed 2x2x2x2. Rowan then challenged him to build Luna's design for the 2x2x2x3. After a lot of time tweaking the designs, printing them, magnetizing them, and assembling them, the 2x2x2x3 was completed on February 3rd 2022.</p>"},{"location":"wiki/grant-2223/#how-does-it-work","title":"How Does it Work?","text":"<p>It follows the same basic principles as Melinda's 2x2x2x2, except gyros get more complicated. Grant made a YouTube video showing off the legal twists, and how it matched the virtual puzzle in MPU exactly.</p>"},{"location":"wiki/grant/","title":"Grant's OBC Method for 2x2x2x2","text":"<p>(work in progress)</p>"},{"location":"wiki/grcl/","title":"GRCL Method","text":"<p>(work in progress)</p>"},{"location":"wiki/luna/","title":"Luna's Method for 2x2x2x2","text":"<p>(work in progress)</p>"},{"location":"wiki/melinda-2222/","title":"Melinda's 2x2x2x2","text":"<p>See Melinda's 2x2x2x2 website for her project overview.</p>"},{"location":"wiki/melinda-2222/#history","title":"History","text":"<p>Many hypercubers, including Melinda Green (one of the developers of MC4D) wanted to create a physical 34, but it just seemed too complicated. Eventually, Melinda decided to focus on the 24 because it only has 16 pieces (4c pieces).</p> <p>Throughout 2013 and 2014, Melinda was in contact with Oskar van Deventer, and together they tried to think of any possible mechanism for a physical 24. After much trouble trying to design a 24 in 3D space, Melinda settled on using magnets as a mechanism. In 2017, Melinda built the first prototype and shared an unlisted video showing it off to the mailing list members. </p> <p>Matthew Sheerin pointed out that the magnet configuration wouldn't be enough to support the puzzle after a 4D rotation, so Melinda had to double the amount of magnets in each piece.</p> <p>In April 2017, Melinda built a 2nd prototype using 3D printing from a company called Shapeways (which just so happened to offer 8 colors, 6 of them being standard Rubik\u2019s Cube colors, plus pink and purple (this is where the standard 4D colour scheme comes from)).</p> <p>In December of 2017, Melinda made a video fully explaining the puzzle, including its canonical moves, scrambling, and more.</p> <p>The pieces of the 2x2x2x2 were mass produced in 2022. The newest version feels super nice and high quality, like a high end GAN cube.</p>  <p>Where can I buy one?</p> <p>Read this section of Melinda's website.</p>"},{"location":"wiki/melinda-2222/#how-does-it-work","title":"How Does it Work?","text":"<p>   <p>Animations showing the correlation between the physical and virtual 24</p> <p>It was obvious that you could rotate the 2 cubic sides in any way you wanted. Gradually (through mailing list community consensus) the move set was narrowed down to just a couple of moves, plus a gyro (4D rotation). Watch Melinda's video on the official canonical moves.</p>"},{"location":"wiki/methods/","title":"Methods","text":"<p>Many standard 3D methods can be scaled up and immediately used on 4D+ puzzles.</p> <p>(This page is still under construction, apologies for any broken links)</p>  <p>Learn Notation before trying to learn any of these methods</p>"},{"location":"wiki/methods/#general-techniques","title":"General Techniques","text":"<ul> <li>RKT</li> <li>Commutators</li> <li>Dimensional Reduction</li> </ul>"},{"location":"wiki/methods/#2x2x2x2-methods","title":"2x2x2x2 Methods","text":""},{"location":"wiki/methods/#virtual","title":"Virtual","text":"<ul> <li>4Tega</li> <li>Cell By Cell</li> </ul>"},{"location":"wiki/methods/#physical","title":"Physical","text":"<ul> <li>Luna's Method</li> <li>Rowan's Method</li> <li>Grant's OBC Method</li> <li>P4L (PBLBC)</li> <li>GRCL Method</li> </ul>"},{"location":"wiki/methods/#3x3x3x3-methods","title":"3x3x3x3 Methods","text":"<ul> <li>CFOP</li> <li>3-Block</li> <li>Octachoroux</li> </ul>"},{"location":"wiki/methods/#4x4x4x4-methods","title":"4x4x4x4+ Methods","text":"<ul> <li>Reduction</li> <li>3Block</li> </ul>"},{"location":"wiki/notation/","title":"Notation","text":"<p>This is notation specifically for n4 virtual puzzles. Notation pages for other puzzles coming soon\u2122\ufe0f...</p>"},{"location":"wiki/notation/#cells","title":"Cells","text":"<p>Yellow cell rotating</p> <p>  </p>  <p>The sides of a 4D puzzle are called <code>cells</code>, each of which is a cubic grid of n3 stickers. Because each side is cubic, they can be rotated with cubic symmetry. A cube has 24 different possible orientations, meaning that each side of a 4D puzzle can be oriented in 24 different ways.</p> <p>The cells are notated: Right, Left, Up, Down, Front, Back, Outside, Inside.</p> <p>This means we to use the letters <code>R</code> <code>L</code> <code>U</code> <code>D</code> <code>F</code> <code>B</code> <code>O</code> <code>I</code>.</p> <p>For the slice layers, we use <code>M</code> <code>E</code> <code>S</code> <code>P</code>, where P is the slice parallel to I/O.</p>"},{"location":"wiki/notation/#pieces","title":"Pieces","text":"<p>Each piece of the puzzle can be labeled based on which cells it is on. The 3c piece that has stickers on the <code>I</code>nside, <code>R</code>ight, and <code>U</code>p cells would be called the <code>IUR</code> piece.</p>"},{"location":"wiki/notation/#moves","title":"Moves","text":"<p>The moves are notated based on which piece you click to do the turn in MC4D. The first letter determines the cell to click on. The second letter determines the sticker on the cell (usually a 2c piece) to click on. For example:</p> <ul> <li><code>RO'</code> means to left click the R cell sticker of the RO piece.</li> <li><code>IUR</code> means to click the I sticker of the IUR piece.</li> <li><code>FRUI</code> means to right click the F sticker of the FRUI piece.</li> </ul> <p>For slice and wide moves, you write the numbers you hold down on the keyboard while clicking. </p> <ul> <li><code>[2]RO</code> Means to hold down 2 on the keyboard while doing an RO move (essentially an M move).</li> <li><code>[23]UO'</code> Means to hold down 2 and 3 on the keyboard while doing a UO' move.</li> </ul>"},{"location":"wiki/notation/#rotations","title":"Rotations","text":"<p>4D rotations work by using the positive sides of each axis (Up, Right, Front, and Outside). You can generalize this to any dimension as long as you always define which side is positive relative to the others.</p> <ul> <li><code>yw</code>: bring y+ to w+ (rotate U to O)</li> </ul> <p>Note how we don't have to use ' prime symbols because wy is the inverse of yw. This makes it a really nice system because it only ever uses 2 letters. You can also use it on the 33: <code>xy</code> means move x+ to y+ (R to U [z rotation]).</p> <p>In reality though, it's easiest to just say use <code>x</code>, <code>y</code>, and <code>z</code> for rotations that don't change the cells on the W axis. For other ones you can just say <code>recenter (cell)</code>. </p>"},{"location":"wiki/notation/#turn-metrics","title":"Turn metrics","text":"<p>There are many different ways to count the number of moves. Listed below are the metrics used by HSC.</p>  ATM <ul> <li>Consecutive twists of the same axis are combined, even with different layers.</li> <li>Whole-puzzle rotations are not counted.</li> </ul>   ETM <ul> <li>Twists are counted as they are executed, including whole-puzzle rotations.</li> </ul>   STM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists count as one move.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul>   BTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Noncontiguous slice twists are split into contiguous slice twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul>   OBTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists are split into contiguous outer-block twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul>  <p>All of these metrics (besides ETM) have their own Quarter Turn counterparts, where twists are broken up into 90\u00b0 twists. For example, a 180\u00b0 face twist takes two 90\u00b0 twists, while a 120\u00b0 edge twist takes three.</p>"},{"location":"wiki/octachoroux/","title":"Octachoroux","text":"<p>Octachoroux</p> <ul> <li><code>Algorithms:</code> 3D Roux + RKT Parity</li> <li><code>Move count:</code> way too many</li> </ul>  <p>This method is Rowan Fortier's attempt to bring the Roux method to the 3x3x3x3.</p>"},{"location":"wiki/octachoroux/#summary","title":"Summary","text":"<ol> <li><code>1st Block</code> \u2014 Solve a 1x2x3x3 block using blockbuilding techniques.</li> <li><code>2nd Block</code> \u2014 Solve a 1x2x3x3 block on the other side of the puzzle.</li> <li><code>CMLC</code> \u2014 Orient and permute the corners of the U cell.</li> <li><code>L/R</code> \u2014 Solve the Left and Right cells.</li> <li><code>M slice</code> - Permute the M slice.</li> </ol>"},{"location":"wiki/octachoroux/#steps","title":"Steps","text":""},{"location":"wiki/octachoroux/#1st-block","title":"1st Block","text":"<p>Start with the \"cross piece\" of the 1st block. Then build four 2c3c and four 3c4c pairs around it, to complete the 1x2x3x3 block. No RKT is needed for this, as none of the other pieces have been solved yet.</p>"},{"location":"wiki/octachoroux/#2nd-block","title":"2nd Block","text":"<p>Use the free M slice to help you build the pairs to make the 2nd 1x2x3x3 block on the opposite side of the puzzle from the 1st block.</p>"},{"location":"wiki/octachoroux/#cmlc","title":"CMLC","text":"<p>Use the same strategies from CFOP, but only for the 4C pieces. This step feels like solving the last cell of a 24, except you have to use 34 algorithms so that you don't mess up other pieces.</p>"},{"location":"wiki/octachoroux/#lr","title":"L/R","text":"<p>Insert the UR and UL 2c pieces using setup moves and EPLL algorithms. Now set up the 3c pieces that need to go to L/R into the IDF spot with the L/R colour on the I cell and the U colour on the D cell. Then move the spot where that L/R edge needs to go above that edge and insert that piece using the RKT algorithm of M D2 M' D2 (2RO' IF' RO2 IF 2RO IF' RO2 IF). Repeat this for all of the edges (pretty tedious).</p>"},{"location":"wiki/octachoroux/#m-slice","title":"M slice","text":"<p>Now all that's left to be solve is the M slice of the puzzle. Notice how the M slice is more like a 33 than the PLC of CFOP. The centers are already permuted too! However, this step is much more painful than normal RKT PLC due to the strange parities that can happen.</p>  <p>tricky situations</p> <ul> <li>A 3c piece can look \"mirrored\" in place.</li> <li>A single 3c piece can be rotated wrong.</li> </ul>"},{"location":"wiki/p4l/","title":"P4L","text":"<p>(work in progress)</p>"},{"location":"wiki/physical-puzzles/","title":"Physical Puzzles","text":"<p>Warning</p> <p>It is highly recommended to learn virtual hypercubing first before trying to understand the physical puzzles.</p>  <p>Physical puzzles refer to higher dimensional puzzles that are physically built in real life (using only 3 dimensions). This often involves clever designs, strange symmetry-abusing tricks, and lots and lots of magnets. Often, these puzzles are too impractical to use, defeating their sole purpose.</p> <p> <p> Grant's rendering of a physical 3x3x3x3  </p> <p>For a documentary about the history of physical puzzles as of December 2022, see Rowan's video.</p>"},{"location":"wiki/physical-puzzles/#list-of-physical-puzzles-that-were-built","title":"List of Physical Puzzles that were built","text":"<ul> <li>Melinda's 2x2x2x2</li> <li>Grant's 2x2x2x3</li> <li>Grant's 2x2x3x3</li> <li>Grant's 2x3x3x3</li> <li>Grant's 1x1x1x1</li> <li>Grant's 3x3x3x3</li> </ul>"},{"location":"wiki/physical-puzzles/#designs-that-havent-been-built-yet","title":"Designs that haven't been built yet","text":"<ul> <li>AxBxCxD (any hypercuboid)</li> <li>1xAxBxC series</li> <li>1x1xAxB series</li> <li>Markk's Simplex</li> <li>Markk's duoprisms</li> <li>{5}x{4} duoprism</li> <li>Akkei's 2x2x2x2x2</li> </ul>"},{"location":"wiki/rkt/","title":"RKT","text":"<p>Learn Notation first</p>   Where does the name RKT come from? <p>In the old notation, the I/O cells were called T/K (Top and Kata). Typically different move sets are notated like <code>&lt;RK,T&gt;</code>, but the term was shortened to RKT. Using I/O notation, it should be called ROI, but the old name stuck.</p>  <p>RKT is a technique to treat a single side of an nd puzzle like an nd-1 puzzle. On 34, this is done by using RO moves to do an R move to the I cell. Then you can rotate the I cell in any direction you want to do moves on it. It was probably invented independently several times, but popularized by Raymond Zhao in his article here.</p> <p>Let's start by translating the Sune OCLL algorithm <code>R U R' U R U2 R'</code> into RKT.</p> <ol> <li>Translate the algorithm to only use rotations and R moves:</li> <li><code>R U R' U R U2 R'</code> becomes <code>R z R z' R' z R z' R z R2 z' R'</code>.</li> <li>R moves become RO turns.</li> <li>Any rotations in the algorithm <code>x, y, or z</code>, become their respective I cell rotation <code>IR, IU, IF</code>.</li> <li>Putting this all together, we have <code>RO IF RO IF' RO' IF RO IF' RO IF RO2 IF' RO'</code></li> </ol>     <p>Note</p> <p>Even though this technique is called RKT, it is not limited to those types of turns. Thus, you can use LO and I- moves instead, or rotate your view and use RU and D- instead of RK and I-.</p>  <p>This can definitely be very confusing and disorienting to beginners, as you have to think about 3x3x3 moves with only R moves and rotations. It takes a lot of practice to get comfortable with RKT, but it is an extremely powerful technique.</p> <p>Another popular way to do this is to use -K moves (treating the puzzle like a big 33), and wide O cell turns. This means that you can turn the I cell and make it look like a normal cube, you just have to worry about moving the wide O layer to do the turns. Essentially, this is the same exact thing, we're just looking at it from another angle. Think of how doing <code>Lw x'</code> is the same thing as doing <code>R</code>.</p>"},{"location":"wiki/rkt/#parity","title":"Parity","text":"<p>RKT parity is a state you can get to that appears to rotate a single layer of a cell by 180\u00b0.  If you try and fix this with RKT, then you will have debt. This means that you must use an algorithm to solve it.</p> <p>You can use a 3D algorithm that rotates the U center 180\u00b0 (<code>R U R' U</code>x5, or <code>L R U2 R' L' U</code>x2). Harder to memorize (but much lower in movecount) is this 9-mover RKT parity alg: <code>IU UR IU' IF' UO' IF RF UR RF' UIR</code>, found by Tetrian22.</p> <ul> <li>PLL + RKT parity algs by Eff</li> </ul> <p>On 24, the algorithm is shorter because it doesn't have to worry about messing up other pieces besides corners. A commonly used one is <code>R2 B2 R2 U R2 B2 R2 U'</code>RKT.</p> <p>On bigger n4 puzzles (where n&gt;3), it can look like a single slice layer of a cell is off by 180\u00b0. An intuitive way to solve this is to do the 24 RKT parity algorithm with wide moves, and then the normal 34 RKT parity algorithm. It can also be avoided by just lining up your slice the same way you line up centers in 3D before finishing last 4 edges (when using freeslice).</p> <p><code>[f' r': [[r' U' l': D2], Iy2]]</code>(swaps UF and UR) </p>"},{"location":"wiki/rkt/#debt","title":"Debt","text":"<p>RKT Debt is when the R cell isn't aligned with the rest of the puzzle. For example, after executing a T perm algorithm with RKT, the R cell will be misaligned by 90\u00b0. RKT Debt always has to be paid back at some point during the solve. During complicated setup moves for fancy inserts, RKT debt can be used as \"ammo\". That is, undoing the debt in a useful way to help solve the puzzle.</p>"},{"location":"wiki/rkt/#cancels","title":"Cancels","text":"<p>RKT cancelling is a newer technique that reduces the move count of RKT algorithms by abusing symmetries. HactarCE made a program called RocKeT to find cancels for algorithms. Often, it just involves inserting some flipping moves at certain points throughout the algorithm.</p>"},{"location":"wiki/rkt/#simultaneous-rkt","title":"Simultaneous RKT","text":"<p>RKT can be done by using 2 opposite sides (e.g. <code>RO</code> and <code>LO</code> turns) as well as normal I cell turns. This would allow you to execute <code>&lt;R,U,L&gt;</code> gen algorithms easier, at the cost of having to fix RKT debt on both layers. Another interesting way to do this is in a method like Belt Method. After solving the belt, orienting opposite sides, and separating the colours, the user is left with solving 2 opposite cells that can be solved simultaneously using RKT. If you turn one of the sides with the belt going through it, it essentially does a twist to both cells. One case that can be annoying is if you want to do a 180\u00b0 turn on one side, and a 90\u00b0 turn on the other (you would have to wait until both cells' debt lined up).</p>"},{"location":"wiki/rkt/#double-rkt","title":"Double RKT +","text":"<p>The term Double/Triple/Quadruple/etc... RKT is used to refer to using RKT to do RKT in 5D+ puzzles. Because RKT lets us treat a single side of an nd like an nd-1, using RKT on the 35 lets us treat a single 4D cell as a 34. And if you know how to use RKT to treat a 34 like a 33, then you can do Double RKT. This generalizes to any number of dimensions, but the movecount doubles each time, making it impractical. This is why bigger nd puzzles are mostly solved using commutators.</p>"},{"location":"wiki/rowan/","title":"Rowans's Method for 2x2x2x2","text":"<p>(work in progress)</p>"},{"location":"wiki/software-hsc/","title":"Hyperspeedcube","text":"<p>Hyperspeedcube is a modern, beginner-friendly 3D and 4D Rubik\u2019s cube simulator with customizable mouse and keyboard controls and advanced features for speedsolving. It\u2019s been used to break numerous speedsolving records.</p> <p>  </p>"},{"location":"wiki/software-hsc/#downloadinstallation","title":"Download/installation","text":"<p>It's recommended to download the Hyperspeedcube program (which is available on Windows, MacOS, and Linux), although a web version is available as well. The latest version is  and can be downloaded from the website here:</p> <p>Download Hyperspeedcube </p> <p>On Windows, it will download as a <code>.zip</code> file. After extracting the files and saving them to the destination of your choice, simply launch the <code>hyperspeedcube.exe</code> file. This is the program, so make sure you save it somewhere you can remember!</p>"},{"location":"wiki/software-hsc/#troubleshooting","title":"Troubleshooting","text":"Windows: <code>download failed - virus detected</code> <p>If it immediately says <code>failed - virus detected</code> just after downloading, then your antivirus software thinks it is a virus. Try opening the Windows Security app, and digging around in the settings there to disable it, then try the download again.</p>   Windows: <code>Windows protected your PC</code> <p>If you get a message that says <code>Windows protected your PC</code> and it <code>prevented an unrecognized app from starting</code> after trying to run the <code>hyperspeedcube.exe</code> file for the first time, then click on the <code>more info</code> button, and then click <code>run anyway</code>.</p>   MacOS: <code>unidentified developer</code> <p>On MacOS, it might say: <code>\"Hyperspeedcube\" can not be opened because it is from an unidentified developer</code>. Try going to System Preferences &gt; Security &amp; Privacy &gt; then click Allow next to where it says Hyperspeedcube is from an unidentified developer.</p>  <p>If you\u2019re having other trouble with Hyperspeedcube, join the Hypercubers Discord server and ping @HactarCE or @Hyperspeedcube Developer.</p>"},{"location":"wiki/software-hsc/#historydevelopment","title":"History/Development","text":"<p>Hyperspeedcube, or HSC, is the brainchild of Andrew Farkas (AKA HactarCE). Initially called Keyboard Speedcube and only supporting 3D Rubik's Cubes, the first screenshot was shared with the Hypercubers Discord on October 25th, 2021. A month later, Rowan Fortier asked Hactar if he could receive an early version of the program, and showcased it in a YouTube video. </p>  <p>The program was renamed to Hyperspeedcube, and many community requested features were added. For a complete list of all releases and changes, see the releases on HSC's GitHub page.</p>"},{"location":"wiki/software-hsc/#future-updates","title":"Future updates","text":"<p>HSC 2.0 is the next major update in the works, with no set release date as of yet. Below is a list of upcoming features:</p> <ul> <li>Build nearly any puzzle in 3D to 7D space</li> <li>Complete overhaul of the graphics engine</li> <li>Built in timer for speedsolves, including an autosplitter for the most common method(s?)</li> <li>Timeline of progress during solve</li> <li>More piece filter customization</li> </ul>   <p> Development screenshots by Hactar  </p>"},{"location":"wiki/software-mc4d/","title":"Magic Cube 4D","text":"<p>Magic Cube 4D was one of the first ever programs capable of simulating higher dimensional twisty puzzles. It was made starting in 1988 by Melinda Green, Don Hatch, Jay Berkenbilt, and Roice Nelson.</p> <p>  <p> 34 puzzle in Magic Cube 4D  </p>"},{"location":"wiki/software-mc4d/#downloadinstallation","title":"Download/installation","text":"<p>Magic Cube 4D requires java to be installed. Then go to https://superliminal.com/cube/, and click on the <code>Click here to download MagicCube4D</code> button. Save the executable <code>mc4d-4-3-343.jar</code> file somewhere you will remember, as this file is how you open the program.</p>"},{"location":"wiki/software-mc4d/#alternative-versions","title":"Alternative versions","text":"<p>Magic Cube 4D has 2 notable variants made by the community that offer different puzzles or options:</p>"},{"location":"wiki/software-mc4d/#raynefork","title":"Raynefork","text":"<p>Raynefork is Raymond Zhao's version of MC4D, which has the updated defualt colour scheme (standard 33 colours plus pink/purple), and some more options in the settings menu. It can be found from its GitHub here.</p>"},{"location":"wiki/software-mc4d/#dons-version","title":"Don's version","text":"<p>Don's version contains some 2D puzzles, many 3D puzzles, and some interesting 4D puzzles. It also has a menu for 5D and 6D puzzles, however they don't work when you select them. Don's version can be downloaded from its GitHub here.</p>"},{"location":"wiki/software-mc4d/#troubleshooting","title":"Troubleshooting","text":"<p>First off, you should read MC4D's FAQ on the superliminal website.</p>  my computer wants to open the <code>.jar</code> file with notepad <p>This means that you haven't installed java properly. Make sure to get the newest from version here. After the installation, right click on the <code>mc4d-4-3-343.jar</code> file, and click open with Java(TM) Platform SE Binary.</p>   facecolors.txt doesn't change my colors <ol> <li>Make sure to close the program. Then reopen it, and reload the puzzle using the menu.</li> <li>If you're on windows and you have show file extensions off in settings, then you may have accidentally named the file <code>facecolors.txt.txt</code>. Try renaming it to just <code>facecolors</code>. (Alternatively, enable showing file extensions in settings)</li> </ol>"},{"location":"wiki/software-mpu/","title":"Magic Puzzle Ultimate","text":"<p>Magic Puzzle Ultimate (MPU) is a program made by Andrey Astrelin that simulates a lot of different puzzles, as well as letting you define your own.</p> <p>Download MPU </p>  <p> 32-cell puzzle in MPU </p>"},{"location":"wiki/software-mpu/#records","title":"Records","text":"<p>Some records for the shortest and first solutions of a puzzle are kept on the Superliminal Wiki page.</p>"},{"location":"wiki/software-mpu/#virtual-puzzles","title":"Virtual Puzzles","text":"<p>While we're waiting for Hyperspeedcube 2.0 to release, Magic Puzzle Ultimate is a great program to get your feet wet in the world of other 4D puzzles.</p> <p>Open the location where your <code>MPUlt</code> folder is. Next, open the <code>MPUlt_puzzles.txt</code> file. This file is a big list of all the puzzles in the program. Now you can copy &amp; paste the puzzles that you want below under their appropriate <code>Block</code>. Just save the file, reopen MPUlt, and the puzzle you added will be in the menu.</p>"},{"location":"wiki/software-mpu/#puzzle-definitions","title":"Puzzle Definitions","text":"3D Puzzles  3x3x3 3x3x3<pre><code>Puzzle 3x3x3\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts -0.33 0.33\n</code></pre>   Skewb Skewb<pre><code>Puzzle Skewb\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0\n</code></pre>   Compy Rainbow Compy Rainbow<pre><code>Puzzle Compy_Rainbow\nDim 3\nNAxis 1\nFaces 1,0,0 0.6667,0.6667,0.6667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts -0.45 0.45\nFixedMask 2\n</code></pre>   Cuboctahedron Cuboctahedron<pre><code>Puzzle Cuboctahedron\nDim 3\nNAxis 2\nFaces 1,0,0 0.667,0.667,0.667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts 0.5 -0.5\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0.5 -0.5\n</code></pre>    4D Puzzles  Tesseract Family  2x2x1x1 2x2x1x1<pre><code>Puzzle 2x2x1x1\nDim 0\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,1\n</code></pre>   2x2x2x1 2x2x2x1<pre><code>Puzzle 2x2x2x1\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre>   2x2x2x3 2x2x2x3<pre><code>Puzzle 2x2x2x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,1.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0.5 -0.5\n</code></pre>   2x2x3x3 2x2x3x3<pre><code>Puzzle 2x2x3x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1.5,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,0,1,0/0,0,1,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,1,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 0,0,0,1/1,0,0,0 0,0,0,1/1,1,0,0\nCuts 0.5 -0.5\n</code></pre>   2x2x3x4 2x2x3x4<pre><code>Puzzle 2x2x3x4\nDim 4\nNAxis 3\nFaces 1,0,0,0 0,0,1.5,0 0,0,0,2\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1 0 -1\n</code></pre>   2x3x4x5 2x3x4x5<pre><code>Puzzle 2x3x4x5\nDim 4\nNAxis 4\nFaces 1,0,0,0 0,1.5,0,0 0,0,2,0 0,0,0,2.5\nGroup 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,1,0,0\nTwists 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 1 0 -1\nAxis 0,0,0,1\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1.5 0.5 -0.5 -1.5\n</code></pre>   3x3x3x1 3x3x3x1<pre><code>Puzzle 3x3x3x1\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre>   3x3x3x2 3x3x3x2<pre><code>Puzzle 3x3x3x2\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts -0.5 0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0\n</code></pre>   4x4x4x4 4x4x4x4<pre><code>Puzzle 4^4\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,-1,0/0,0,0,1 0,2,-1,-1/0,1,1,-2\nCuts 0.5 0 -0.5\n</code></pre>    Other  {4}x{4} 3 {4}x{4} 3<pre><code>Puzzle {4}x{4} 3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1\nCuts 0.5 -0.5\n</code></pre>   3^4 Skewb 3^4 Skewb<pre><code>Puzzle 3^4 Skewb\nDim 4\nNAxis 1\nFaces 1,0,0,0\nSimplified\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0\n</code></pre>   5-5_Duotegum 5-5_Duotegum<pre><code>Puzzle 5-5_Duotegum\nDim 4\nNAxis 1\nFaces -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.65\n</code></pre>   16-cell Face Turning 16-cell Face Turning<pre><code>Puzzle 16-cell_FT\nDim 4\nNAxis 1\nFaces 1,1,1,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0.6 -0.6\nFixedMask 2\n</code></pre>   Chamfered Pentagonal Duoprism Chamfered Pentagonal Duoprism<pre><code>Puzzle Chamfered_Pentagonal_Duoprism\nDim 4\nNAxis 2\nFaces -1.41429,0,0,0 1.41429,0,0,0 -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,0,0,0\nTwists 0,1,0,0/0,0.809016994,0,0.587785252 0,0,1,0/0,0,0,1\nCuts 1.3 -1.23\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.85\n</code></pre>   Chamefered Tesseract Chamfered Tesseract<pre><code>Puzzle Chamfered_Tesseract\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.70710678,0.70710678,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1 0,0,1,0/0,0,1,1\nCuts 0.85 -0.85\nAxis 1,1,0,0\nTwists 0,0,1,0/0,0,1,1 1,-1,0,0/0,0,1,0 1,-1,0,0/0,0,1,1\nCuts 0.57 -0.57\n</code></pre>   Octahedral Prism Octahedral Prism<pre><code>Puzzle Octahedral_Prism\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,1,1,1\nGroup 1,0,0,0/0,1,0,0 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,1,0/0,0,1,1 0,1,0,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,1,1,1\nTwists 0,1,-1,0/0,1,0,-1 1,0,0,0/0,1,-1,0\nCuts 0.5 -0.5\n</code></pre>   Snub 24-cell Snub 24-cell<pre><code>Puzzle Snub24cell\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0\n#Faces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0 0.9045085,0.6545085,-0.25,0\nGroup 0,2,-1,-1/0,1,1,-2 0,1,1,2/0,2,-1,1 2,-2,-2,0/1,-1,-1,3\nAxis 1,0,0,0\nTwists 0,2,-1,-1/0,1,1,-2 0,0,1,0/0,0,0,1 0,1,1,2/0,2,-1,1\nCuts 0.9 -0.9\nFixedMask 2\nAxis 0.809017,0.809017,0,0\nTwists 2,-2,-2,0/1,-1,-1,3 1,-1,-1,-3/2,-2,-2,0 0,0,0,1/0,0,1,0\nCuts 0.95 -0.95\nFixedMask 2\n</code></pre>   Square Antiprism Prism Square Antiprism Prism<pre><code>Puzzle Square_Antiprism_Prism\nDim 4\nNAxis 3\nFaces -0.5,0,0,0 0,0,0.42044820,0 0,0.56903559,0.14014940,0\nGroup 0,0,1,0/0,0.38268343,0,0.92387953 0,0,0,1/0,1,0,1 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,0,1 0,0,1,0/0,0.38268343,0,0.92387953 0,0,1,0/0,-0.38268343,0,0.92387953\nCuts 0.1666 -0.1666\nAxis 0,0,1,0\nTwists 0,1,0,0/0,1,0,1 1,0,0,0/0,1,0,0 1,0,0,0/0,1,0,1\nCuts 0.1235 -0.1235\nAxis 0,0.56903559,0.14014940,0\nTwists 1,0,0,0/0,0,0,1\nCuts 0.621\n</code></pre>   Triangular Antitegmatic Icoschoron Triangular Antitegmatic Icosachoron<pre><code>Puzzle Triangular-antitegmatic_Icosachoron\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/0.5,0.866025404,0,0 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415\n#1,0,0,0/0.5,sqrt(3)/2,0,0 0,1/sqrt(3),sqrt(2/3),0/0,0,1/sqrt(6),sqrt(5/6) \nAxis 1,0,0,0\nTwists 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415 0,0.790569,-0.559017,0.25/0,0.57735,1.22474,0.912871\nCuts 0.75 -0.75\n</code></pre>     5D Puzzles  Penteract Family  1x1x1x1x2 1x1x1x1x2<pre><code>Puzzle 1x1x1x1x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,0,1\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/0,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,0,1\nCuts\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/1,1,0,0,0\nCuts 0\n</code></pre>   1x1x1x2x2 1x1x1x2x2<pre><code>Puzzle 1x1x1x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,1,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts\nAxis 0,0,0,1,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,0,1\nCuts 0\n</code></pre>   1x1x2x2x2 1x1x2x2x2<pre><code>Puzzle 1x1x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,1,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0 0,0,1,0,0/0,0,1,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts\nAxis 0,0,1,0,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts 0\n</code></pre>   1x2x2x2x2 1x2x2x2x2<pre><code>Puzzle 1x2x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,1,0,0,0\nGroup 1,0,0,0,0/0,1,0,0,0 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,1,0,1,0 0,1,0,0,0/0,1,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts\nAxis 0,1,0,0,0\nTwists 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts 0\n</code></pre>   2x2x2x2x2 2x2x2x2x2<pre><code>Puzzle 2^5\nDim 5\nNAxis 1\nFaces 1,0,0,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/1,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts 0\n</code></pre>    Other  Simplex Prism Simplex Prism<pre><code>Puzzle Simplex_Prism\nDim 5\nNAxis 2\nFaces 0,0,0,0,1 1,0,0,0,0\nGroup 1,0,0,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0 0,2,-2,0,0/0,1,1,-1,-2.236068\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/0,1,-1,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\nAxis 1,0,0,0,0\nTwists 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\n</code></pre>   {3,3}x{4} {3,3}x{4}<pre><code>Puzzle {3,3}x{4}\nDim 5\nNAxis 2\nFaces 1,1,1,0,0 0,0,0,1.73205081,0\nGroup 1,1,0,0,0/1,0,-1,0,0 1,1,0,0,0/0,1,-1,0,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,1,1,0,0\nTwists 0,0,0,1,0/0,0,0,1,1 1,-1,0,0,0/1,0,-1,0,0 1,-1,0,0,0/0,0,0,1,0\nCuts -0.33333\nAxis 0,0,0,1,0\nTwists 1,1,0,0,0/1,0,-1,0,0 0,0,0,0,1/1,-1,0,0,0\nCuts 0\n</code></pre>"},{"location":"wiki/software-mpu/#making-your-own-puzzles","title":"Making your own puzzles","text":"<p>If you figure out the notation, you can try adding your own puzzles. You define the symmetry group, rotational axes, cutting planes, possible twists and puzzle boundary.</p> <p>There is also a general formula for 4D duoprism puzzles, made by Luna: {p}x{q}<pre><code>Puzzle {p}x{q}\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,tan(pi/p),0,0 0,0,1,0/0,0,1,tan(pi/q)\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,tan(pi/q)\nCuts ...\nAxis 0,0,1,0\nTwists 0,0,0,1/0,1,0,0 1,0,0,0/1,tan(pi/p),0,0\nCuts ...\n</code></pre></p>"},{"location":"wiki/software/","title":"Software","text":"<p>Hypercubing is mostly experienced through the various programs that exist to simulate higher dimensional puzzles. Below is a list of the programs.</p>"},{"location":"wiki/software/#what-program-should-i-download","title":"What program should I download?","text":"<p>It depends on what exactly you want to do. If you want the best experience for solving the n4, then Hyperspeedcube is the way to go.</p> <p>If you want to level up to higher dimensions, then try MC5D, MC7D, MPU, and MS5D. </p> <p>If you want to try puzzles in Non-Euclidean geometries, then try Magic Tile and Magic Hyperbolic Tile.</p> <p>For Android phones and tablets, you can download MC4D from the Google Play Store.</p>"},{"location":"wiki/software/#list-of-hypercubing-software","title":"List of hypercubing software","text":"<ul> <li>Hyperspeedcube</li> <li>Magic Cube 4D</li> <li>Magic Cube 5D</li> <li>Magic Cube 7D</li> <li>Magic 120 Cell</li> <li>Magic Puzzle Ultimate</li> <li>Magic Simplex 5D</li> <li>Nan Ma's 11-cell</li> <li>Magic Cube 3D</li> <li>Magic Hyperbolic Tile</li> <li>akkei's physical 34 program</li> </ul>"},{"location":"wiki/software/#list-of-other-recommended-software","title":"List of other recommended software","text":"<ul> <li>Magic Tile</li> <li>4D Blocks</li> <li>pCubes</li> <li>Nan Ma's RefleCube</li> </ul>"}]}